% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/regional_table.R
\name{regional_table}
\alias{regional_table}
\title{Make ACS table for a region of towns}
\usage{
regional_table(town_list, name = "Aggregate", town_lookup, state = 9,
  table.number, year = 2015)
}
\arguments{
\item{town_list}{A character vector of the names or FIPS codes of towns in the region}

\item{name}{Name of the region. Defaults to "Aggregate"}

\item{town_lookup}{A data.frame or tbl. Must have columns \code{town} and \code{county}, as generated by \code{\link{get_town_names}}}

\item{state}{Either a number corresponding to the state's FIPS code, or a string with the state's two-letter abbreviation or full name. Defaults to 9, FIPS code for Connecticut}

\item{table.number}{String corresponding to an ACS table number; this is case-sensitive}

\item{year}{Endyear of ACS estimates as a four-digit integer}
}
\value{
Returns an \code{\link[acs]{acs-class}} object, as is standard from the \code{acs} package.
}
\description{
Makes ACS table aggregated across a region of towns
}
\examples{
inner_ring <- c("Hamden", "East Haven", "West Haven")
ct_towns <- get_town_names(state = 9)
inner_ring_pops <- regional_table(inner_ring, name = "Inner Ring", ct_towns,
  table.number = "B01003")

}
\seealso{
\code{\link{get_town_names}}, which returns a dataframe of towns and countied formatted for \code{town_lookup}
}
